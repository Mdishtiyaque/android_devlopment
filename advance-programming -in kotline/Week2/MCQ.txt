1.
Question 1
What was the output when you ran your solution?

1 point

[Onion, Cheese, Water]


Onion,

Cheese,

 Water


[Onion, Cheese, Water, Salt]

2.
Question 2
Replace the Salt string in the removeSalt extension function with Cheese. Run the code. What is the output?

1 point

[Onion, Cheese, Water]


[Onion, Water, Salt]


[Onion, Water]

3.
Question 3
Little Lemon asks you to write a new extension function to remove an ingredient (provided as a string) from a dish. Which of these extension functions will perform the requested task?

1 point

fun Dish.removeIngredient(ingredient: String) { ingredients.remove(ingredient) } 


fun String.removeIngredient(ingredient: String) { remove(ingredient) } 


fun String.removeIngredient(dish: Dish) { dish.ingredients.remove(this) }


*****************************************************************************************************************

1.
Question 1
Which of the below can be inherited? Select all that apply.

1 / 1 point

An open class

Correct
Correct! Open classes are open for extension and can be inherited.


An interface

Correct
Correct! Interfaces are designed to be inherited.


An object


A final class

2.
Question 2
Extension functions can be quite useful. Which of these are benefits of extension functions? Select all that apply.

1 / 1 point

They can access private properties and functions of the extended class.


They can be called just like normal functions of the extended class.

Correct
Correct! Extension functions are called using the same syntax as normal functions.


They allow extending final and 3rd party classes.

Correct
Correct! Extension functions let you extend behavior of classes that cannot or should not otherwise be modified.


They can override existing functions of a class.

3.
Question 3
You are asked to implement an extension function for the final Dish class that would print out its ingredients field. How would the extension function look?

1 / 1 point

fun List<Ingredient>.printIngredients(dish: Dish) { println(this) }


fun printIngredients(dish: Dish) { println(dish.ingredients) }


fun Dish.printIngredients(ingredients: List<Ingredient>) { println(ingredients) }


fun Dish.printIngredients() { println(ingredients) }



***************************************************************************************************

1.
Question 1
For a class Rectangle, which of these represents the correct syntax for defining an extension function getWidth?

1 / 1 point

1
fun Rectangle getWidth(): Int
fun Rectangle getWidth(): Int


1
fun Rectangle.getWidth(): Int
fun Rectangle.getWidth(): Int


1
fun getWidth<Rectangle>(): Int
fun getWidth<Rectangle>(): Int

Correct
Correct. You use the dot operator after the class name and before the function name to define an extension function.

2.
Question 2
For the extension function fun Rectangle.getWidth(): Int, what is the correct way to call the function in the code?

1 / 1 point

1
Rectangle.getWidth()
Rectangle.getWidth()


1
Rectangle().getWidth()
Rectangle().getWidth()


1
getWidth(Rectangle())
getWidth(Rectangle())

Correct
Correct. You call an extension function using an instance of the class on which the function is defined.

3.
Question 3
Which type of testing is performed to test individual components of an applicationâ€™s code logic?

1 / 1 point

Integration testing


Unit testing


End-to-end testing

Correct
Correct. Unit testing is performed to test individual components, also known as the unit under test.

4.
Question 4
While using JUnit, which annotation is used to mark a function as a unit test?

1 / 1 point

@UnitTest


@Test


@JUnitTest

Correct
Correct. You use @Test annotation to mark a function as a test.

5.
Question 5
When should you use mocks in your tests?

1 / 1 point

When you need to define a complete alternate definition of an object to be used for testing.


When there are objects that are not to be tested but are needed because the code under test depends on them.


When you need to test only some specific behavior of an object

Correct
Correct. You use mocks to simulate the behavior of objects that the test code depends on.

6.
Question 6
Which of these is a definition of the List collection type?

1 / 1 point

An unordered group of elements that cannot contain duplicate elements.


An ordered group of elements that can contain duplicate elements.


An unordered group of elements that can contain duplicate elements.

Correct
Correct. A List is an ordered group of elements that can contain duplicate elements.

7.
Question 7
What is the output of the code below:

123
val numberSet = setOf(1, 8, 5, 7, 5, 2)println(numberSet) 
val numberSet = setOf(1, 8, 5, 7, 5, 2)
println(numberSet)


1 / 1 point

[1, 8, 5, 7, 5, 2]


[1, 8, 5, 7, 2]


[1, 8, 7, 2]

Correct
Correct. A set cannot contain duplicate elements.

8.
Question 8
What is the output of the following code:

123456789
val map = mapOf( 1 to 90,  2 to 93, 3 to 91, 4 to 93, 2 to 95, 5 to 93)println(map)
val map = mapOf(
 1 to 90, 
 2 to 93,
 3 to 91,
 4 to 93,
 2 to 95,
 5 to 93
)
println(map)

0 / 1 point

{1=90, 2=93, 3=91, 4=93, 5=93}


{1=90, 2=95, 3=91, 4=93, 5=93}


{1=90, 2=93, 3=91, 4=93, 2=95, 5=93}

Incorrect
Not quite. You can recap this topic in the 
Map recap
 reading in Week 2.

9.
Question 9
Which of these represents the correct syntax for defining a generic class?

0 / 1 point

1
class <T> Item(t: T) { }
class <T> Item(t: T) { }


1
class Item<T>(t: T) { }
class Item<T>(t: T) { }


1
class <T>.Item(t: T) { }
class <T>.Item(t: T) { }

Incorrect
Not quite. You can recap this topic in the 
What are generics classes?
 video in Week 2.

10.
Question 10
Which of these represents the correct syntax for defining a generic function?

1 / 1 point

1
fun sampleFunction<T> (item: T) { }
fun sampleFunction<T> (item: T) { }


1
fun <T> sampleFunction(item: T) { }
fun <T> sampleFunction(item: T) { }


1
fun <T>.sampleFunction(item: T) { }

