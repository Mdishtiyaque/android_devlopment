1.
Question 1
Which of these are correct ways to instantiate a function type. Select all that apply.

1 / 1 point

Using instance of a user defined class that implements a function type as an interface.

Correct
Correct! You can instantiate a function using a defined class that implements a function type as an interface.


Using the function name.


Using a lambda expression.

Correct
Correct! You can use a lambda expression to instantiate a function type.


Using a callable reference to existing declaration using the ‘::’ operator

Correct
Correct! You can use a callable reference such as ‘::functionName’.

2.
Question 2
Which of these is a syntactically valid function type?

1 / 1 point

(Int) -> Int, String


Int, Int -> (String)


(Int, Int) -> String

Correct
Correct! You define the list of parameters enclosed in a parenthesis, followed by arrow notation and the return type.

3.
Question 3
Which of these is a correct lambda expression syntax?

1 / 1 point

x: Int, y: Int -> x * y


x: Int, y: Int -> { x * y }


{ x: Int, y: Int -> x * y }

Correct
Correct! This is the correct syntax.

4.
Question 4
Which of these would output ‘hello world’ when the function defined below is called?

123
fun execute(string: String, function: (String) -> String) {  println(function(string))}
fun execute(string: String, function: (String) -> String) { 
 println(function(string))
}

0 / 1 point

execute { "hello world" }


execute("hello") { "$it world" }


execute("hello") { "world" }

Incorrect
Not quite. This would print only ‘world’ as the print statement is defined on the return value of the lambda expression.

5.
Question 5
Which listener interface provided by the Android framework is used to listen for button press events?

1 / 1 point

View.OnTapListener


View.OnPressListener


View.OnClickListener


*************************************************************************************************************************************

1.
Question 1
What is a higher-order function?

1 / 1 point

A function that depends on another function for its output.


A higher-order function is a function that does not return any value.


A function that takes functions as parameters, or returns a function.

Correct
Correct! A higher-order function is a functional programming concept that allows function to be passed just as objects of other data types.

2.
Question 2
Which of these is a correct way to call the function greet:

12345678910
  fun greet(name: String, function: (name: String) -> Unit) { function(name)}  fun print(name: String) { println("Hello $name")}


fun greet(name: String, function: (name: String) -> Unit) {
 function(name)
}


fun print(name: String) {
 println("Hello $name")
}

1 / 1 point

greet("Joe", print)


greet("Joe") { println("Hi $it") }

Correct
Correct! You can pass a function as a lambda expression to a higher-order function.


greet("Joe", ::print)

Correct
Correct! You can use the :: operator to obtain the reference of a function.


greet { print(it) } (“Joe”)

3.
Question 3
Which of the following constructs is the repeat function similar to? 

1 / 1 point

while loop 


for loop 


If statement 

Correct
Correct! The repeat function is similar to a for loop where you define the number of iterations beforehand. 

4.
Question 4
What is the output of the following code?

123456
val number = 2var output = 1repeat(3) { index -> output += (index * number)}println(output)
val number = 2
var output = 1
repeat(3) { index ->
 output += (index * number)
}
println(output)

1 / 1 point

7


13


6


****************************************************************************************************************************


1.
Question 1
What is the output of the following code?

123456
var sum = 0val numberList = listOf(2, 8, 3, 11) numberList.forEach { number -> sum += number}println(sum)
var sum = 0
val numberList = listOf(2, 8, 3, 11) 
numberList.forEach { number ->
 sum += number
}
println(sum)

1 / 1 point

2


11


24

Correct
Correct! The code would iterate over each element and then add each element’s value to a variable named sum.

2.
Question 2
What is the output of this code:

123456789101112131415
data class Car(val color: String,val amount: Int)val list = listOf( Car("Black", 43000), Car("Red", 30000), Car("White", 36000))val output = list.map {  it.color}  println(output)
data class Car(
val color: String,
val amount: Int
)
val list = listOf(
 Car("Black", 43000),
 Car("Red", 30000),
 Car("White", 36000)
)
val output = list.map { 


1 / 1 point

[Black, Red, White]


[Car(color=Black, amount=43000), Car(color=Red, amount=30000), Car(color=White, amount=36000)]


[43000, 30000, 36000]

Correct
Correct! The code transforms the initial list into a new list that contains values of color.

3.
Question 3
What do you expect to get as the output of this code? 

123456789
val list = listOf(1, 3, 4, 7)  val output = list.fold(3) { x, y -> x + y}  println(output)
val list = listOf(1, 3, 4, 7)


val output = list.fold(3) { x, y ->
 x + y
}


println(output)

1 / 1 point

18


12


3

Correct
Correct! The fold function accumulates a value starting from the initial value of 3 and then applies the operation to each element in the list.

4.
Question 4
What output would you expect for this code?

1234567891011121314
val numberMap = mapOf( 5 to 6, 3 to 2, 8 to 7, 4 to 1)val output = numberMap.map { entry -> entry.value}.filter {  it > 3}.fold(0) { x, y -> x + y}println(output)
val numberMap = mapOf(
 5 to 6,
 3 to 2,
 8 to 7,
 4 to 1
)
val output = numberMap.map { entry ->
 entry.value
}.filter { 
 it > 3


0 / 1 point

17


13


3

Incorrect
Not quite. The map function in the code does not transform the elements to the keys in the map but to the values in the map. 

5.
Question 5
What is the output of the code below: 

12345678910111213
data class Car( val color: String, val amount: Int ) val list = listOf(     Car("Black", 43000),     Car("Red", 30000),     Car("White", 36000) )  val output = list.filter { car ->     car.amount > 35000 } println(output) 
data class Car( 
val color: String, 
val amount: Int 
) 
val list = listOf( 
    Car("Black", 43000), 
    Car("Red", 30000), 
    Car("White", 36000) 
)  
val output = list.filter { car -> 


1 / 1 point

[Car(color=Black, amount=43000), Car(color=White, amount=36000)]


Correct
Correct! This code above filters the ‘car’ elements that have ‘amount’ > 35000, and returns a new list with only those elements that comply with the condition.


[Car(color=Black, amount=43000), Car(color=Red, amount=30000), Car(color=White, amount=36000)]



[Car(color=Red, amount=30000)]


****************************************************************************************************************************************************************************************************************************************************

1.
Question 1
Which of these are correct ways to instantiate a function type. Select all that apply.

1 / 1 point

Using instance of a user defined class that implements a function type as an interface.

Correct
Correct! You can instantiate a function using a defined class that implements a function type as an interface.


Using a lambda expression.

Correct
Correct! You can use a lambda expression to instantiate a function type.


Using a callable reference to existing declaration using the ‘::’ operator

Correct
Correct! You can use a callable reference such as ‘::functionName’.


Using the function name.

2.
Question 2
Which of these is a correct usage of lambda expression for the given function definition?

123
fun execute(number: Int, function: (Int) -> String) { println(function(number))}
fun execute(number: Int, function: (Int) -> String) {
 println(function(number))
}

1 / 1 point

execute(100) { "Score $it" }


execute("Score") { "$it 100" }


execute(100) ( "Score $it" )

Correct
Correct! The above function takes in an ‘Int’ argument and then prints a string by concatenating it with the ‘Score’.

3.
Question 3
Which of the these is a correct lambda expression syntax?

1 / 1 point

val difference: (Int, Int) -> Int = x: Int, y: Int -> { x - y }


val difference: (Int, Int) -> Int = x: Int, y: Int -> x - y


val difference: (Int, Int) -> Int = { x: Int, y: Int -> x - y }

Correct
Correct! This is the correct syntax

4.
Question 4
Which listener interface provided by the Android framework is used to listen for a button press event?

1 / 1 point

View.OnPressListener


View.OnTapListener


View.OnClickListener

Correct
Correct! The ‘View’ class contains an interface ‘OnClickListener’ that has a method ‘onClick’ which gets called on events such as a button press.

5.
Question 5
Which of these are higher-order functions? Select all that apply.

1 / 1 point

fun display(x: (Int) -> Unit)

Correct
Correct! This is a higher-order function as it takes another function as a parameter.


fun display(): (Int) -> Unit

Correct
Correct! This is a higher-order function as it returns a function.


fun display(x: (Int)) -> Unit


fun display(x: Int) : Unit

6.
Question 6
What is the output of this code?


1234567
val number = 3var output = 2repeat(5) { index -> output += (index * number)}println(output) 
val number = 3
var output = 2
repeat(5) { index ->
 output += (index * number)
}
println(output)


1 / 1 point

30


32


47

Correct
Correct! You correctly calculated the output of the given code.

7.
Question 7
What is the output of the following code?


1234567
var sum = 0 val numberList = listOf(1, 4, 6, 7, 9) numberList.forEach { number -> sum += number}println(sum)
var sum = 0

val numberList = listOf(1, 4, 6, 7, 9) 
numberList.forEach { number ->
 sum += number
}
println(sum)

1 / 1 point

1


27


9

Correct
Correct! The above code would iterate over each element and then add each element’s value to variable named ‘sum’.

8.
Question 8
What is the output of this code:

1234567891011121314
data class Chocolate(  val flavor: String,  val price: Int ) val list = listOf(  Chocolate("Dark", 7),  Chocolate("Milk", 4),  Chocolate("Coffee", 2) )val output = list.map {  it.flavor } println(output) 
data class Chocolate( 
 val flavor: String, 
 val price: Int 
) 
val list = listOf( 
 Chocolate("Dark", 7), 
 Chocolate("Milk", 4), 
 Chocolate("Coffee", 2) 
)
val output = list.map { 


1 / 1 point

[Dark, Milk, Coffee]


[Chocolate(flavor=Dark, price=7), Chocolate(flavor=Milk, price=4), Chocolate(flavor=Coffee, price=2)]


[7, 4, 2]

Correct
Correct! The above code transforms the initial list to a new list that contains values of 'flavor’.

9.
Question 9
What is the output of this code:

1234567891011121314
data class Chocolate(  val flavor: String,  val price: Int ) val list = listOf(  Chocolate("Dark", 7),  Chocolate("Milk", 4),  Chocolate("Coffee", 2) )val output = list.filter {  it.price > 3} println(output) 
data class Chocolate( 
 val flavor: String, 
 val price: Int 
) 
val list = listOf( 
 Chocolate("Dark", 7), 
 Chocolate("Milk", 4), 
 Chocolate("Coffee", 2) 
)
val output = list.filter { 


1 / 1 point

[Chocolate(flavor=Dark, price=7), Chocolate(flavor=Milk, price=4), Chocolate(flavor=Coffee, price=2)]


[Chocolate(flavor=Coffee, price=2)]


[Chocolate(flavor=Dark, price=7), Chocolate(flavor=Milk, price=4)]

Correct
Correct! The code above filters the 'chocolate’ elements that have ‘price’ > 3, and returns a new list with only those elements that comply to the condition.

10.
Question 10
What is the output of this code: 

123456
val list = listOf(9, 3, 1, 6) val output = list.fold(1) { x, y ->  x + y } println(output) 
val list = listOf(9, 3, 1, 6) 
val output = list.fold(1) { x, y -> 
 x + y 
} 
println(output)


1 / 1 point

1


18


20


