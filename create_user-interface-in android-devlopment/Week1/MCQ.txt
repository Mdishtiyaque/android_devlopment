1.
Question 1
 The first screen that appears after an app is launched is known as a _____________?   


Screen class

Component Activity

Main Activity

   


2.
Question 2
 What are the advantages of using Jetpack Compose for UI development? Check all that apply.    


 It can help build a UI using less code    

 It helps developers maintain a consistent UI across multiple devices and platforms such as Android, iOS and the web.    

 It builds a UI without needing to use an Activity.

 It simplifies the development of UI components for Android applications    

    

3.
Question 3
 What is the purpose of View Groups when building an Android UI? Select all that apply.    


 To define the navigation paths between screens     

 To allow for the creation of complex user interfaces    

 To replace the use of TextView     

 To provide a better organization of views.

   

4.
Question 4
 Which of these are commonly used views in Android applications? Select all that apply.    


TextView

Button
   
ActivityView

TextField
  
ButtonView

ImageView

    

5.
Question 5
 Which of the following are layout views that can be used in Android UI design. Select all that apply.    


RelativeLayout
   
ViewLayout

LinearLayout

UILayout

GridLayout


**************************************************************************************************************************************************************************************

1.
Question 1
Declarative UI programming allows developers to define the UI and its behavior in a concise and expressive way by describing the desired result instead of the details of how to achieve it.    

True

False


2.
Question 2
 In Jetpack Compose the ‘Compose’ item can best be described as:    

A library for developing UI that is part of the Jetpack suite.

Compose is a tool that builds a UI without needing to use an Activity

A reusable view component.


3.
Question 3
What are the three main benefits to using a declarative approach when building an Android UI? Select all that apply.



More succinct code

Less complex UI components 

Reduced need for unit tests 

Improved performance 

Easier to read and debug code


4.
Question 4
In this code,a composable function is defined. What is the name of this function?


 @Composablefun MainPanel(name: String) {    Text(text = "$name")}
 @Composable
fun MainPanel(name: String) {
    Text(text = "$name")
}

MainPanel

Composable

Text



5.
Question 5
In this code, a composable function is defined. In the second-last code line the “name” argument is passed to another function Text. What is the best description of this function?


@Composablefun MainPanel(name: String) {    Text(text = "$name")}
@Composable
fun MainPanel(name: String) {
    Text(text = "$name")
}

A variable          

A function written by the developer.

A built-in composable function in the Compose library.


**************************************************************************************************************************************************************************************************

1.
Question 1
True or False: The nesting of composables in a UI can best be represented with a tree structure. 



True



False


2.
Question 2
Which of the following does an Activity represent?



navigation elements



The app screen



the program entry point



A text element 


3.
Question 3
Which of the following are all UI elements subclasses of?



an Activity



the View class



the ViewGroup class



the Layout class


4.
Question 4
Which of the following states are part of the Activity Lifecycle in Android UI Development? 

Select three that apply.



Resumed



Started



Created



Deleted


5.
Question 5
Which of the following view groups has an src property?



TextView



ImageView



Button 



ProgressBar


6.
Question 6
Which of the following is based on the declarative approach?



the traditional view system



the View class



Inheritance



Jetpack Compose


7.
Question 7
Which file must you add the Jetpack Compose Preview library dependency to in order to use it in your project?


strings.xml



MainActivity.kt



build.gradle


8.
Question 8
Which of the following is an Invisible UI element that acts as a container to other views?



A tree



View



View group



Layout


9.
Question 9
Which of the following correspond to the attributes of XML elements?


Object properties



View Subclasses



View groups



Layouts


10.
Question 10
Which of the following are guides in organizing and arranging other UI elements on the screen?


views



layouts



composables