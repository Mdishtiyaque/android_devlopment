1.
Question 1
Which of these is true for modifiers?



They change how a composable behaves or appears.


They must be provided for every composable


They change the container of a composable



2.
Question 2
The composable argument that would replace xxxx in the code below is known as a:

fun SayHello(name: String) {

   Text(

        text = "Hey $name!",

        xxxx = xxxx.padding(10.dp)

    )

}



Modifier


Compose


Augmenter



3.
Question 3
What is the order of precedence for modifier chaining in Android UI Development?



Layout, Themes, Widgets 


Themes, Widgets, Layout


Widgets, Layout, Themes



4.
Question 4
What is the best way to handle an event in Android UI Development? 


Implement an OnClickListener interface.


Use a switch statement.


Augment composables



5.
Question 5
Which of these event modifiers is used when the app user presses a mouse button?



Shift 


Control 


Alt 


Meta 


Action 



**************************************************************************************************************************************************************************************************************************



1.
Question 1
Not all ‘events’ in an Android app happen due to user interaction. 

True


False

2.
Question 2
What does 'Recomposition' in Jetpack Compose allow developers to do? 



Reuse existing code 


Write new code without editing existing code.


Refresh the UI whenever the data changes. 


3.
Question 3
In Jetpack Compose what does the mutableStateOf function create?


State that can be changed over time. 


An immutable state of code


A fixed state of data


4.
Question 4
A composable holding and modifying its state internally is called a ____________.

Stateless composable


Stateful composable


Stateful Recomposition


5.
Question 5
What is the main purpose of State Hoisting in Android UI Development? 


To store and restore UI states during configuration changes 


To aid in debugging an application


To improve the performance of an Android application 



**********************************************************************************************************************************************************************************************

1.
Question 1
 True or False: Modifiers can be used to define margins and padding in Jetpack Compose. 



True



False


2.
Question 2
Which of the following Material Components can be implemented using Jetpack Compose? Select all that apply.



card



button



list



text-field


3.
Question 3
Which of the following is the correct way to add a spacing of 10 dp around all four sides of a text composable?


Text(
    text = “Hello World!”,
    modifier = Modifier.padding(10.dp)
)


 
Text(
    text = “Hello World!”,
    modifier = padding(10.dp)
)


Text(
    text = “Hello World!”,
    padding = Modifier.padding(10.dp)
)



4.
Question 4
Which of the following is a keyword that retains the value of a state variable after recomposition?



mutableState



MutableStateOf



remember



mutate 


5.
Question 5
Which of the following is the correct programming term for a user action?



tapping



action



callback



event


6.
Question 6
What is a BottomSheetScaffold?



A UI pattern that provides a full screen overlay when triggered.



A UI pattern that slides up from the bottom of the screen.



A UI pattern that provides a side-panel for navigating.


7.
Question 7
Which of the following Design Systems can Jetpack Compose make it easy to implement?



Material Design



Human Interface Guidelines



Polaris



Uber Design 


8.
Question 8
Which of the following makes material components in Compose adaptable?


lambdas



scaffolds



modifiers



slots


9.
Question 9
Which of the following are customizable layouts that provide support to add various UI structures and components?



Composables



Slots



UI patterns



Scaffolds


10.
Question 10
What are UI Patterns? 



UI Patterns are reusable solutions to common user interface problems during Android UI building in Jetpack Compose. 



UI Patterns are data structures used to represent UI elements in an Android UI. 



UI Patterns are components of an Android UI that can be reused. 



UI Patterns are algorithms used to compute the layout of an Android UI. 



